server:
  port: 8084
spring:
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://${orders_db_host}:${orders_db_port}/${orders_db}
    username: ${orders_db_user}
    password: ${orders_db_password}
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
 
  kafka:
    producer:
      bootstrap-servers: ${kafka_host}:${kafka_port}
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.type.mapping: n_order_success:com.raffleease.orders_service.Kafka.Messages.Success.SuccessNotificationRequest, release_tickets:com.raffleease.orders_service.Kafka.Messages.Tickets.TicketsReleaseRequest
    consumer:
      bootstrap-servers: ${kafka_host}:${kafka_port}
      group-id: orders-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: '*'
        spring.json.type.mapping: p_order_success:com.raffleease.orders_service.Kafka.Messages.Success.SuccessNotification, order_failure:com.miguel.raffles.com.raffleease.orders_Service.Kafka.Messages.Failure.FailureNotification
    
application:
  config:
    tickets-url: http://${raffles_host}:${raffles_port}/api/v1/tickets
    stripe-url: http://${payments_host}:${payments_port}/api/v1/stripe
